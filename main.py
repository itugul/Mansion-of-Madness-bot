import logging
import time
import json
import random
from telegram import Update
from telegram.ext import filters, MessageHandler, ApplicationBuilder, CommandHandler, ContextTypes, Application

class bcolors:
    PURP = '\033[95m'  # Purple color
    BLUE = '\033[94m'  # Blue color
    GREEN = '\033[92m'  # Green color
    YELL = '\033[93m'  # Yellow color
    RED = '\033[91m'  # Red color
    BOLD = '\033[1m'  # Bold
    ULINE = '\033[4m'  # Underline
    ENDC = '\033[0m'  # End of color line

logging.basicConfig(
    format=f"{bcolors.GREEN}%(asctime)s - %(name)s - %(levelname)s - %(message)s{bcolors.ENDC}",
    level=logging.INFO
)

token = ""
adm_chat_id = -4006484999
statistics_db = {}
start_timer = 0
duration_game = 21600
completed_puzzles = []
players = []
game_on = False
puzzle_text = []
start_text = []
end_text = []


#–°–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def remove_job_if_exists(name: str, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """Remove job with given name. Returns whether job was removed."""
    current_jobs = context.job_queue.get_jobs_by_name(name)
    if not current_jobs:
        return False
    for job in current_jobs:
        job.schedule_removal()
    return True

async def alarm(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send the alarm message."""
    global game_on

    job = context.job
    if completed_puzzles.count(0) < 1:
        await context.bot.send_message(job.chat_id, text=end_text[0])
    else:
        await context.bot.send_message(job.chat_id, text=end_text[1])
    game_on = False
    await save()

async def game_off_alert(update, context):
    await context.bot.send_message(
        chat_id=update.effective_chat.id ,
        text="–ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ –æ–∫–æ–Ω—á–µ–Ω–∞!"
    )

def start_load():
        global statistics_db
        global start_timer
        global duration_game
        global completed_puzzles
        global players
        global game_on
        global puzzle_text
        global start_text
        global end_text

        with open("data.json", "r", encoding="utf-8") as read_file:
            data = json.load(read_file)
        start_timer = data['start_timer']
        duration_game = data['duration_game']
        completed_puzzles = data['completed_puzzles']
        players = data['players']
        game_on = data['game_on']
        puzzle_text = data['puzzle_text']
        start_text = data['start_text']
        end_text = data['end_text']
        print(f"{bcolors.YELL}–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{bcolors.ENDC}")

async def check_fin(num, update, context):
    if completed_puzzles[num - 1] != 0:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ó–∞–¥–∞–Ω–∏–µ ‚Ññ" + str(num) + " —É–∂–µ —Ä–µ—à–µ–Ω–æ. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏—Å–ª–∞–ª " + completed_puzzles[num - 1] + ". –£–∑–Ω–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É –Ω–µ–≥–æ."
        )
        return True
    else:
        return False
    
async def completing_puzzle(num, update, context):
    global completed_puzzles

    completed_puzzles[num - 1] = "@" + update.effective_user.username
    players_id = players.copy()
    players_id.append(adm_chat_id)
    count = 0
    for i in completed_puzzles:
        if i != 0:
            count += 1
    all_puzzle_fin = ""
    if count == len(completed_puzzles):
        all_puzzle_fin = "\n\n–í—Å–µ –ø–µ—á–∞—Ç–∏ —Å–Ω—è—Ç—ã! –û—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –¥–æ–∂–¥–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–≤—ë–∑–¥, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ –∑–∞—Å–ª—É–≥–∞–º!"
    for id in players_id:
        await context.bot.send_message(
            chat_id=id,
            text="–ó–∞–¥–∞–Ω–∏–µ ‚Ññ" + str(num) + " –ø—Ä–æ–π–¥–µ–Ω–æ! " + completed_puzzles[num - 1] + " –ø—Ä–∏—Å–ª–∞–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç." + all_puzzle_fin
        )


async def save():
    data = {
        'statistics_db': statistics_db,
        'start_timer': start_timer,
        'duration_game': duration_game,
        'completed_puzzles': completed_puzzles,
        'players': players,
        'game_on': game_on,
        'puzzle_text': puzzle_text,
        'start_text': start_text,
        'end_text': end_text
    }
    with open('data.json', 'w', encoding="utf-8") as save_file:
        json.dump(data, save_file, indent=4)
    print(f"{bcolors.YELL}–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.{bcolors.ENDC}")

def how_time_left():
    time_left = duration_game - (time.time() - start_timer)
    hours_left = time_left // 3600
    minutes_left = (time_left % 3600) // 60
    seconds_left = ((time_left % 3600) % 60) // 1
    res = "–û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑: " + str(int(hours_left)) + ":" + str(int(minutes_left)) + ":" + str(int(seconds_left))

    return res

def how_puzzles_completed():
    count = 0
    for i in completed_puzzles:
        if i != 0:
            count += 1
    return str(count) + " –∏–∑ 5—Ç–∏ –∑–∞–≥–∞–¥–æ–∫ —Ä–µ—à–µ–Ω–æ"

def statistics():
    statistics_str = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º:\n"
    for i in statistics_db.items():
        statistics_str += str(i) + "\n"
    if completed_puzzles.count(0) < 1:
        statistics_str += "üî•üî•üî•üî•üî•üî•üî•üî•–§–ò–ù–ê–õüî•üî•üî•üî•üî•üî•üî•üî•"
    return statistics_str

async def registration(context, update, puzzle_num, rep):
    global statistics_db
    global players

    name = "@" + str(update.effective_user.username)
    if name not in statistics_db[update.effective_message.text.lower()]:
        statistics_db[update.effective_message.text].append(name)
        if rep:
            for id in players:
                if id != update.effective_chat.id:
                    await context.bot.send_message(
                        chat_id=id,
                        text= name + " –ø—Ä–æ–¥–≤–∏–Ω—É–ª—Å—è –≤ –∑–∞–¥–∞–Ω–∏–∏ ‚Ññ" + str(puzzle_num) + ". –°–≤—è–∂–∏—Å—å —Å –Ω–∏–º, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–∞–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!"
                    )

    if update.effective_chat.id not in players:
        players.append(update.effective_chat.id)
        """Add a job to the queue."""
        time_left = duration_game - (time.time() - start_timer)
        context.job_queue.run_once(alarm, time_left, chat_id=update.effective_chat.id, name=str(update.effective_chat.id), data=duration_game)

    await save()

async def user_msg_footer(context, update, puzzle_num= 0, rep= True):
    if update.effective_chat.id != adm_chat_id:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text = how_puzzles_completed() + "\n\n" + how_time_left()
        )

        await registration(context, update, puzzle_num, rep)
        await report(context, update)

async def send_msg(update, context, puzzle_num, stage_num, clue = "", clue_target = "", fin = False):
    to_send = "–û, –∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏—è ‚Ññ" + str(puzzle_num) + "\n–î–∞–≤–∞–π—Ç–µ —è –Ω–∞–ø–æ–º–Ω—é —á—Ç–æ —Ç–∞–º –∑–∞ –∑–∞–¥–∞–Ω–∏–µ:" + "\n" + puzzle_text[puzzle_num-1][0] 
    if len(puzzle_text[puzzle_num-1][stage_num]) > 2:
        to_send += "\n\n–ê –≤–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é –æ —Ç–≤–æ–µ–π –Ω–∞—Ö–æ–¥–∫–µ:\n" + puzzle_text[puzzle_num-1][stage_num][2]
    if update.effective_chat.id != adm_chat_id:
        if not await check_fin(puzzle_num, update, context):
            if fin:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text= puzzle_text[puzzle_num-1][stage_num][2]
                )
                await completing_puzzle(puzzle_num, update, context)
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text= to_send
                )
                if clue_target != "" and len(statistics_db[clue_target]) > 1:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id ,
                        text= "–í–æ–æ–±—â–µ —Ç–æ, —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ —É–∂–µ –Ω–∞—à—ë–ª " + str(statistics_db[clue_target][random.randint(1, len(statistics_db[clue_target]) - 1)]) + " . –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —É –Ω–µ–≥–æ!"
                    )
            await user_msg_footer(context, update, puzzle_num)
    else:
        await context.bot.send_message(
            chat_id=adm_chat_id,
            text= to_send
        )


#–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def load_timer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    players_id = players.copy()
    players_id.append(adm_chat_id)
    time_left = duration_game - (time.time() - start_timer)
    for id in players_id:
        """Add a job to the queue."""
        remove_job_if_exists(str(id), context)
        context.job_queue.run_once(alarm, time_left, chat_id=id, name=str(id), data=duration_game)
    await context.bot.send_message(
            chat_id=adm_chat_id,
            text = "–¢–∞–π–º–µ—Ä—ã –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        )
    print(f"{bcolors.YELL}–¢–∞–π–º–µ—Ä—ã –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.{bcolors.ENDC}")
    

async def add_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id == adm_chat_id:
        global duration_game

        duration_game += int(context.args[0]) * 60
        await context.bot.send_message(
            chat_id=adm_chat_id,
            text = how_time_left()
        )
        print(f"{bcolors.YELL}–¢–∞–π–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {bcolors.ENDC}", int(context.args[0]), f"{bcolors.YELL}–º–∏–Ω—É—Ç{bcolors.ENDC}")
        await load_timer(update, context)
        await save()


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id == adm_chat_id:
        global statistics_db
        global start_timer
        global duration_game
        global completed_puzzles
        global players
        global game_on
        global puzzle_text
        global start_text
        global end_text

        with open("default_data.json", "r", encoding='utf-8') as read_file:
            data = json.load(read_file)
        start_timer = data['start_timer']
        duration_game = data['duration_game']
        puzzle_text = data['puzzle_text']
        start_text = data['start_text']
        end_text = data['end_text']

        completed_puzzles = [0 for vl in puzzle_text]

        statistics_db.clear()
        statistics_db['/start'] = ['start', ]
        puzzle_num = 1
        while puzzle_num <= len(puzzle_text):
            stage_num = 1
            while stage_num < len(puzzle_text[puzzle_num-1]):
                label = "quest " + str(puzzle_num)
                if puzzle_text[puzzle_num-1][stage_num][0]!="fin":
                    label += "." + str(stage_num)
                else:
                    label += " fin"
                statistics_db[puzzle_text[puzzle_num-1][stage_num][1]] = [label, ]
                stage_num += 1
            puzzle_num += 1

        players_id = players.copy()
        players_id.append(adm_chat_id)
        for id in players_id:
            """Remove a job to the queue."""
            remove_job_if_exists(str(id), context)
        players = data['players']

        game_on = data['game_on']
        await context.bot.send_message(
            chat_id=adm_chat_id,
            text = "–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞!"
        )
        print(f"{bcolors.YELL}–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö.{bcolors.ENDC}")

async def load(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id == adm_chat_id:
        global statistics_db
        global start_timer
        global duration_game
        global completed_puzzles
        global players
        global game_on
        global puzzle_text
        global start_text
        global end_text

        with open("data.json", "r", encoding="utf-8") as read_file:
            data = json.load(read_file)
        statistics_db = data['statistics_db']
        start_timer = data['start_timer']
        duration_game = data['duration_game']
        completed_puzzles = data['completed_puzzles']
        players = data['players']
        game_on = data['game_on']
        puzzle_text = data['puzzle_text']
        start_text = data['start_text']
        end_text = data['end_text']
        await context.bot.send_message(
            chat_id=adm_chat_id,
            text = "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
        )
        print(f"{bcolors.YELL}–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{bcolors.ENDC}")

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_on
    
    if update.effective_chat.id == adm_chat_id and not game_on:
        global start_timer

        start_timer = time.time()
        dgh = duration_game / 3600
        game_on = True
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: " + time.ctime(start_timer) + "\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–≥—Ä—ã: " + str(int(dgh)) + "—á–∞—Å–æ–≤\n" + how_time_left()
        )
        """Add a job to the queue."""
        time_left = duration_game - (time.time() - start_timer)
        context.job_queue.run_once(alarm, time_left, chat_id=adm_chat_id, name=str(adm_chat_id), data=duration_game)
        await save()
        print(f"{bcolors.YELL}–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞.{bcolors.ENDC}")

async def cid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=update.effective_chat.id
    )

async def report(context, update):
    await context.bot.send_message(
        chat_id=adm_chat_id,
        text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + str(update.effective_user.username) + " –ø—Ä–∏—Å–ª–∞–ª –∫–æ–¥: " + update.effective_message.text + "\n" + str(statistics())
    )

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id == adm_chat_id:
        await context.bot.send_message(
            chat_id=adm_chat_id,
            text = how_puzzles_completed() + "\n\n" + how_time_left()
        )
        await context.bot.send_message(
            chat_id=adm_chat_id,
            text = statistics()
        )

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id == adm_chat_id:
        await context.bot.send_message(
            chat_id=adm_chat_id,
            text = "/info - —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n/start_game - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á—ë—Ç.\n\n/add_duration –•–•–• - –¥–æ–±–∞–≤–∏—Ç—å –•–•–• –º–∏–Ω—É—Ç –∫ —Å—á—ë—Ç—á–∏–∫—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –≤—Ä–µ–º—è, —Ç–æ —É–∫–∞–∑–∞—Ç—å -–•–•–• –º–∏–Ω—É—Ç.  \n\nreset - —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã –¥–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π. P.S. –≤—Å—ë —Å–æ—Ç—Ä—ë—Ç—Å—è, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—Å—è, –Ω–æ –æ–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Ç–æ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è!\n\n/load - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏. –ú–æ–∂–µ—Ç –ø–æ–º–æ—á—å, –µ—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—á–µ–º—É —Ç–æ –æ–±–Ω—É–ª–∏–ª–∞—Å—å, –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–µ—ë –µ—â—ë –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∏.–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–´–ü–û–õ–ù–Ø–¢–¨ –ü–†–ò –ü–ï–†–ï–ó–ê–ü–£–°–ö–ï\n\n /load_timer - –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–´–ü–û–õ–ù–Ø–¢–¨ –ü–†–ò –ü–ï–†–ï–ó–ê–ü–£–°–ö–ï"
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text = "–ó–∞–ø—É—Ç–∞–ª—Å—è?\n\n–ï—Å–ª–∏ —Ç—ã –Ω–∞—à—ë–ª –∫–∞–∫–æ–π —Ç–æ –∫–æ–¥, –≤—ã–≥–ª—è–¥—è—â–∏–π —Ç–∞–∫: 123456 - –≤–≤–µ–¥–∏ –µ–≥–æ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ.\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –∏–¥–µ–π –≥–¥–µ –∏—Å–∫–∞—Ç—å, –∏–≥—Ä–∞–π –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏ - –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è —Å–æ–æ–±—â—É —Ç–µ–±–µ –æ –∫–∞–∂–¥–æ–º —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –∫—Ç–æ —Ç–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–Ω–µ –∫–æ–¥, —Ç—ã –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –∏ —Ä–∞—Å–ø—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏!\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤—Å—ë –µ—â—ë –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Å—å –∫ –†–∏–¥–º–∞–Ω—É(@itugul)."
        )
        await context.bot.send_message(
            chat_id=adm_chat_id,
            text = "@" + update.effective_user.username + " –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â–∏ —É –±–æ—Ç–∞."
        )


#–§—É–Ω–∫—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
#-—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –≤–≤–æ–¥–Ω–∞—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if game_on:
        for message in start_text:
            if message.startswith('https'):
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=message
                )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=message
                )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∏–≥—Ä—É! –î–µ–π—Å—Ç–≤—É–π—Ç–µ —Å–æ–æ–±—â–∞, –∏ –≤—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∂‚Ä¶–∫—Ö–º –í–´–ò–ì–†–ê–ï–¢–ï. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –±–æ—Ç–∞ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–≤–æ–¥–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∫–æ–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–π–¥—ë—Ç–µ –≤ —Ö–æ–¥–µ —Å–≤–æ–µ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä \" 123456 \" –∏–ª–∏ \" –æ—Ç–≤–µ—Ç_–Ω–∞_–∑–∞–≥–∞–¥–∫—É \" . –Ø —Å–æ–æ–±—â—É —Ç–µ–±–µ –æ –∫–∞–∂–¥–æ–º —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –∫—Ç–æ —Ç–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –º–Ω–µ –∫–æ–¥, —Ç—ã –º–æ–∂–µ—à—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –∏ —Ä–∞—Å–ø—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏! /help - –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã.*"
        )
        await user_msg_footer(context, update, rep=False)
    else:
        await game_off_alert(update, context)

async def test(update = Update, context = ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–æ—É! –í–æ—Ç –∏ –ø—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω–æ–π —É–ª–∏–∫–∏. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –û–±—ã—á–Ω–æ —Ç—É—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è –∏ –∏–Ω–æ–≥–¥–∞ –∫–∞–∫–∞—è —Ç–æ –¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."
    )

#–î–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤
async def dispatcher(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if game_on:
        message_text = update.message.text.lower()
        if message_text == "–æ—Ç–≤–µ—Ç_–Ω–∞_–∑–∞–≥–∞–¥–∫—É" or message_text == "123456":
            await test(update, context)
            return
        else:
            puzzle_num = 1
            while puzzle_num <= len(puzzle_text):
                stage_num = 1
                while stage_num < len(puzzle_text[puzzle_num-1]):
                    print(message_text, ' == ', puzzle_text[puzzle_num-1][stage_num][1])
                    if message_text == puzzle_text[puzzle_num-1][stage_num][1].lower():
                        await send_msg(update, context, puzzle_num, stage_num, fin = puzzle_text[puzzle_num-1][stage_num][0]=="fin")
                        return
                    stage_num += 1
                puzzle_num += 1
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ –ø–æ–Ω–∏–º–∞—é –æ —á—ë–º —Ç—ã.")
        await user_msg_footer(context, update, rep=False)
    else:
        await game_off_alert(update, context)

if __name__ == '__main__':
    start_load()
    with open("default_data.json", "r", encoding='utf-8') as read_file:
        data = json.load(read_file)
    adm_chat_id = data['adm_chat_id']
    token = data['token']
    application = ApplicationBuilder().token(token).build()

    #–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
    start_handler = CommandHandler('start', start)
    handler_test = CommandHandler('123456', test)
    handler_answer_filter = MessageHandler(filters.TEXT & (~filters.COMMAND), dispatcher)

    #–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ
    handler_start_game = CommandHandler('start_game', start_game)
    handler_cid = CommandHandler('cid', cid)
    handler_info = CommandHandler('info', info)
    handler_help = CommandHandler('help', help)
    handler_load = CommandHandler('load', load)
    handler_reset = CommandHandler('reset', reset)
    handler_add_duration = CommandHandler('add_duration', add_duration)
    handler_load_timer = CommandHandler('load_timer', load_timer)

    application.add_handler(handler_answer_filter)
    application.add_handler(handler_load_timer)
    application.add_handler(handler_add_duration)
    application.add_handler(handler_reset)
    application.add_handler(handler_load)
    application.add_handler(handler_help)
    application.add_handler(handler_info)
    application.add_handler(handler_start_game)
    application.add_handler(handler_cid)
    application.add_handler(start_handler)
    application.add_handler(handler_test)
    application.run_polling()
